# coding: utf-8

"""
    BRP bewoning

    API voor het raadplegen van de (historische) bewoning van een adres. 

    The version of the OpenAPI document: 2.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from brp_bewoning_client.models.geboorte_basis import GeboorteBasis
from brp_bewoning_client.models.naam import Naam
from typing import Optional, Set
from typing_extensions import Self

class Bewoner(BaseModel):
    """
    Bewoner
    """ # noqa: E501
    burgerservicenummer: Optional[Annotated[str, Field(strict=True)]] = None
    geheimhouding_persoonsgegevens: Optional[StrictBool] = Field(default=None, description="Indicatie dat persoonsgegevens niet mogen worden verstrekt aan derden / maatschappelijke instellingen. ", alias="geheimhoudingPersoonsgegevens")
    in_onderzoek: Optional[StrictBool] = Field(default=None, description="Geeft aan dat de verblijfplaats in onderzoek is. ", alias="inOnderzoek")
    naam: Optional[Naam] = None
    geboorte: Optional[GeboorteBasis] = None
    __properties: ClassVar[List[str]] = ["burgerservicenummer", "geheimhoudingPersoonsgegevens", "inOnderzoek", "naam", "geboorte"]

    @field_validator('burgerservicenummer')
    def burgerservicenummer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{9}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{9}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bewoner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of naam
        if self.naam:
            _dict['naam'] = self.naam.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geboorte
        if self.geboorte:
            _dict['geboorte'] = self.geboorte.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bewoner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "burgerservicenummer": obj.get("burgerservicenummer"),
            "geheimhoudingPersoonsgegevens": obj.get("geheimhoudingPersoonsgegevens"),
            "inOnderzoek": obj.get("inOnderzoek"),
            "naam": Naam.from_dict(obj["naam"]) if obj.get("naam") is not None else None,
            "geboorte": GeboorteBasis.from_dict(obj["geboorte"]) if obj.get("geboorte") is not None else None
        })
        return _obj


